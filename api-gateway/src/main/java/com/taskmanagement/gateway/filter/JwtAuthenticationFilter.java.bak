package com.taskmanagement.gateway.filter;

import com.taskmanagement.gateway.security.JwtUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.util.List;

@Component
@Slf4j
public class JwtAuthenticationFilter implements GlobalFilter, Ordered {

    private final JwtUtil jwtUtil;
    private final List<String> openApiEndpoints = List.of(
            "/api/auth/login",
            "/api/auth/register",
            "/actuator",
            "/actuator/health",
            "/actuator/info"
    );

    public JwtAuthenticationFilter(JwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        ServerHttpRequest request = exchange.getRequest();
        String path = request.getURI().getPath();
        
        log.debug("Request path: {}", path);
        
        // Skip validation for open endpoints
        if (isOpenEndpoint(path)) {
            log.debug("Skipping JWT validation for open endpoint: {}", path);
            return chain.filter(exchange);
        }

        // Check for Authorization header
        if (!request.getHeaders().containsKey("Authorization")) {
            log.error("No Authorization header found in request");
            return onError(exchange, "No Authorization header", HttpStatus.UNAUTHORIZED);
        }

        // Get token from header
        String token = request.getHeaders().getFirst("Authorization");
        if (token != null && token.startsWith("Bearer ")) {
            token = token.substring(7);
        } else {
            log.error("Invalid token format, must start with 'Bearer '");
            return onError(exchange, "Invalid token format", HttpStatus.UNAUTHORIZED);
        }
        
        // Validate token
        if (token == null || !jwtUtil.validateToken(token)) {
            log.error("Invalid JWT token");
            return onError(exchange, "Invalid JWT token", HttpStatus.UNAUTHORIZED);
        }

        log.debug("JWT token validated successfully");
        
        // Add user ID and role as headers for downstream services
        ServerHttpRequest mutatedRequest = exchange.getRequest().mutate()
                .header("X-User-Id", String.valueOf(jwtUtil.getUserIdFromToken(token)))
                .header("X-User-Email", jwtUtil.getUsernameFromToken(token))
                .header("X-User-Role", jwtUtil.getRoleFromToken(token))
                .build();

        return chain.filter(exchange.mutate().request(mutatedRequest).build());
    }

    private boolean isOpenEndpoint(String path) {
        return openApiEndpoints.stream().anyMatch(path::startsWith);
    }

    private Mono<Void> onError(ServerWebExchange exchange, String err, HttpStatus httpStatus) {
        ServerHttpResponse response = exchange.getResponse();
        response.setStatusCode(httpStatus);
        log.error(err);
        return response.setComplete();
    }

    @Override
    public int getOrder() {
        return -1; // High priority
    }
}
