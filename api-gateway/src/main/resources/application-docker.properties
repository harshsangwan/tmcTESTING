# Docker profile configuration
spring.application.name=api-gateway
server.port=8080

# Enable Eureka for service discovery in Docker environment
eureka.client.enabled=true
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://discovery-service:8761/eureka/
eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# Spring Cloud Config - disabled for Docker
spring.cloud.config.enabled=false
spring.config.import=optional:configserver:

# JWT Configuration
app.jwt.secret=${JWT_SECRET:3cfa76ef14937c1c0ea519f8fc057a80fcd04a7420f8e8bcd0a7567c272e007b80c0ceb73d3d121182c95878b9a33cd8caf5bee427d6f0b9b5b989f0bd25c035}
app.jwt.issuer=taskmanagement

# CORS Configuration - More restrictive for Docker
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-origins=*
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-methods=GET,POST,PUT,DELETE,PATCH,OPTIONS
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-headers=Authorization,Content-Type,X-Requested-With
spring.cloud.gateway.globalcors.cors-configurations.[/**].exposed-headers=Authorization
spring.cloud.gateway.globalcors.cors-configurations.[/**].allow-credentials=true
spring.cloud.gateway.globalcors.cors-configurations.[/**].max-age=3600

# Route Configuration for Auth Service
spring.cloud.gateway.routes[0].id=auth-service
spring.cloud.gateway.routes[0].uri=lb://auth-service
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/auth/**
spring.cloud.gateway.routes[0].filters[0]=RewritePath=/api/auth/(?<segment>.*), /api/auth/${segment}

# Route Configuration for Project Service
spring.cloud.gateway.routes[1].id=project-service
spring.cloud.gateway.routes[1].uri=lb://project-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/projects/**
spring.cloud.gateway.routes[1].filters[0]=RewritePath=/api/projects/(?<segment>.*), /api/projects/${segment}
spring.cloud.gateway.routes[1].filters[1]=AuthenticationFilter

# Route Configuration for Task Service
spring.cloud.gateway.routes[2].id=task-service
spring.cloud.gateway.routes[2].uri=lb://task-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/tasks/**
spring.cloud.gateway.routes[2].filters[0]=RewritePath=/api/tasks/(?<segment>.*), /api/tasks/${segment}
spring.cloud.gateway.routes[2].filters[1]=AuthenticationFilter

# Route Configuration for Admin Service
spring.cloud.gateway.routes[3].id=admin-service
spring.cloud.gateway.routes[3].uri=lb://admin-service
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/admin/**
spring.cloud.gateway.routes[3].filters[0]=RewritePath=/api/admin/(?<segment>.*), /api/admin/${segment}
spring.cloud.gateway.routes[3].filters[1]=AuthenticationFilter

# Route Configuration for Integration Service
spring.cloud.gateway.routes[4].id=integration-service
spring.cloud.gateway.routes[4].uri=lb://integration-service
spring.cloud.gateway.routes[4].predicates[0]=Path=/api/integrations/**
spring.cloud.gateway.routes[4].filters[0]=RewritePath=/api/integrations/(?<segment>.*), /api/integrations/${segment}
spring.cloud.gateway.routes[4].filters[1]=AuthenticationFilter

# Actuator Configuration for monitoring
management.endpoints.web.exposure.include=health,info,gateway,metrics
management.endpoint.health.show-details=always

# Logging Configuration for docker environment
logging.level.root=INFO
logging.level.com.taskmanagement.gateway=INFO
logging.level.org.springframework.cloud.gateway=INFO